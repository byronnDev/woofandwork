<span id="typewriter"></span><span class="cursor">|</span>

<script is:inline lang="module">
  const phrases = [
    "🐾 Marketing para Mascotas",
    "🦮 Marketing Pet-Friendly",
    "🐱 Contenido Atractivo para Mascotas",
    "🐶 Campañas Creativas Pet",
    "🦴 Resultados en Marketing Mascotas",
    "🏆 Branding para Mascotas",
    "💕 Amor por el Marketing Pet",
    "📱 Social Media para Mascotas",
    "🎯 Marketing Veterinario",
    "🌟 Impulsa tu Mascota como Marca",
    "🌈 Ideas de Marketing Exitosas",
    "🎨 Creatividad en Marketing Pet",
    "🚀 Elevamos tu Marca Pet",
    "✨ Historias de Marketing Pet",
    "🎯 Estrategias Impactantes Pet",
    "💫 Innovación en Marketing Pet",
    "🌟 Brillamos con tu Mascota",
    "🔝 Marketing de Impacto Pet",
    "💡 Ideas de Tendencia para Mascotas",
    "🎉 Resultados Extraordinarios Pet"
  ];

  let typeInterval;
  let phraseIndex = Math.floor(Math.random() * phrases.length);
  let charIndex = 0;
  let isDeleting = false;

  const typePhrase = () => {
    const currentPhrase = phrases[phraseIndex];
    const displayedText = isDeleting
      ? currentPhrase.substring(0, charIndex - 1)
      : currentPhrase.substring(0, charIndex + 1);

    typewriter.textContent = displayedText;

    let delay = isDeleting ? 50 : 150;

    if (!isDeleting && charIndex === currentPhrase.length) {
      delay = 1000;
      isDeleting = true;
    } else if (isDeleting && charIndex === 0) {
      isDeleting = false;
      phraseIndex = (phraseIndex + 1) % phrases.length;
      delay = 500;
    }

    isDeleting ? charIndex-- : charIndex++;
    typeInterval = setTimeout(typePhrase, delay);
  };

  const startTyping = () => {
    if (typeInterval) return;
    typePhrase();
  };

  const stopTyping = () => {
    clearTimeout(typeInterval);
    typeInterval = null;
  };

  const initializeObserver = (typewriterElement) => {
    const observer = new IntersectionObserver((entries) => {
      entries.forEach(entry => {
        if (entry.isIntersecting) {
          startTyping();
        } else {
          stopTyping();
        }
      });
    });

    observer.observe(typewriterElement);
  };

  document.addEventListener('DOMContentLoaded', () => {
    try {
      const typewriter = document.getElementById('typewriter');
      if (!typewriter) return;

      initializeObserver(typewriter);
    } catch (error) {
      console.error(error);
    }
  });
</script>

<style>
  .cursor {
    display: inline-block;
    margin-left: 2px;
    animation: blink 0.75s step-start 0s infinite;
  }

  @keyframes blink {
    50% { opacity: 0; }
  }
</style>